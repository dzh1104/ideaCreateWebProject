<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--配置数据库信息(替代Mybatis的配置文件)-->
    <!--数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${driver}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
    </bean>

    <!--在Spring IOC容器中 创建mybatis的核心类SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!--加载mybatis配置文件-->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"></property>-->
        <!--代替mybatis 加载mapper.xml文件 * 加载所有-->
        <property name="mapperLocations" value="com/netease/mapper/*.xml"></property>
    </bean>

    <!--spring引入外部配置文件和mybatis引入外部配置文件的不同: 见neteaseMybatis-->
    <!--spring方式一-->
    <bean id="config" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="locations">
            <array>
                <value>classpath:db.properties</value>
            </array>
        </property>
    </bean>

    <!--配置dao-->
    <bean id="studentMapper" class="com.netease.dao.impl.StudentMapperImpl">
        <!--重要：将spring配置的sqlSessionFactory 交给mapper(dao层)-->
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>

    <!--配置service-->
    <bean id="studentService" class="com.netease.service.impl.IStudentServiceImpl">
        <property name="studentMapper" ref="studentMapper"></property>
    </bean>

    <!--加载外部资源properties文件-->
    <!--spring方式二-->
    <context:property-placeholder location="classpath:db.properties" />

    <!--
        Spring整合MyBatis
            思路: SqlSessionFactory -> SqlSession -> StudentMapper -> CRUD
            可以发现，MyBatis最终是通过SqlSessionFactory来操作数据库，
            Spring整合MyBatis，其实就是 将 MyBatis 的 SqlSessionFactory 交给 Spring

        SM整合步骤:
            1.添加jar包
            2.类(com.netease.entity.Student) - 表(netease - student)
            3.mybatis配置文件 mybatis-config.xml
            4.通过mapper.xml将 类 表 简历映射关系
            5.之前使用mybatis: config.xml ->
            SqlSessionFactory，现在整合的时候，需要通过Spring管理SqlSessionFactory，因此产生SqlSessionFactory所需要的数据库信息，不在放入mybatis
            的配置文件中了，而是需要放在spring配置文件中，并且在spring配置文件中加载mybatis的配置文件
            6.配置spring的配置文件(applicationContext.xml)
            7.使用spring-mybatis整合产物开发程序
                目标：通过spring产生mybatis最终操作需要的 动态mapper对象(studentMapper对象)
                spring产生 动态mapper对象有三种方法：
                    a.DAO层实现类 继承 SqlSessionDaoSupport类
                        SqlSessionDaoSupport类 提供了一个属性 SqlSession对象
    -->
</beans>